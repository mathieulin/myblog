[{"content":"这是CTS代码 快速通过CTS 获取评测数据（读书人的事情嘛）\nString input=\u0026#34;\u0026#34;; while (true) { argStr = in.nextLine(); [+] input+=argStr; [+]\tinput+=\u0026#34;;\u0026#34;; String[] splited = argStr.split(\u0026#34;\\\\s+\u0026#34;); ...... else if (Objects.equals(splited[0], \u0026#34;QUIT\u0026#34;)){ [+]\tSystem.out.println(input);\tSystem.out.println(\u0026#34;----- Good Bye! -----\u0026#34;); System.exit(0); } 然后你就得到了\nTunakTunakTun;addLine Line13 4 Dazhongshi 28 Zhichunlu 30 Wudaokou 48 Shangdi 96 Xierqi 121 Longze 148;addLine Manchu 2 Shahe 20 Hamazhen 59 Wulongbei 150 Tangshancheng 207 Gaolimen 281 Fenghuangcheng 272 Sitaizi 430 Jiguanshan 498 Benxihu 586;addTrain K0012 Line13 22 90 7 120;addTrain G1001 Manchu 22 90 7 120 2.4 200;addTrain 00026 Line13 3 100 7 10 2.4 0;addUser xiaoyangren F 041401700330;addUser xiaoyinren M 054502770201;addUser xiaoxuesheng F 016103550800 2;importCert cert.csv;login 041401700330 xiaoyangren;buyTicket K0012 Dazhongshi Zhichunlu 1A 50;listOrder;logout;importCert cert2.csv;login 041401700330 xiaoyangren;buyTicket G1001 Shahe Gaolimen SB 50;listOrder;cancelOrder G1001 Shahe Gaolimen SB 49;listTrain Manchu;listOrder;logout;login 016103550800 xiaoxuesheng;buyTicket G1001 Shahe Gaolimen SB 1;buyTicket G1001 Shahe Gaolimen SB 3;payOrder;checkBalance;rechargeBalance 5000;payOrder;checkBalance;listOrder;logout;login 054502770201 xiaoyinren;buyTicket G1001 Shahe Gaolimen SB 12;listOrder;logout;QUIT; 然后运行\npublic class Transform { public static void main(String[] args){ String input = \u0026#34;\u0026#34; # 上面得到的input String[] commands = input.split(\u0026#34;;\u0026#34;); int i; for(i=0;i\u0026lt; commands.length;i++){ System.out.println(commands[i]); } } } import java.io.*; import java.util.*; import static java.lang.Math.abs; public class Test { static boolean isLogin = false; public static void main(String args[]) throws IOException { Scanner in = new Scanner(System.in); String argStr; Vector\u0026lt;User\u0026gt; userList = new Vector\u0026lt;User\u0026gt;(); Vector\u0026lt;Line\u0026gt; lineList = new Vector\u0026lt;Line\u0026gt;(); Vector\u0026lt;Train\u0026gt; trainList = new Vector\u0026lt;Train\u0026gt;(); Vector stationList = new Vector(); HashMap\u0026lt;String, Boolean\u0026gt; certMsg = new HashMap\u0026lt;String, Boolean\u0026gt;(); User user = new User(); boolean isAdmin = false; while (true) { argStr = in.nextLine(); String[] splited = argStr.split(\u0026#34;\\\\s+\u0026#34;); if(Objects.equals(splited[0], \u0026#34;addUser\u0026#34;)){ addUser(userList, splited); } else if (Objects.equals(splited[0], \u0026#34;QUIT\u0026#34;)){ System.out.println(\u0026#34;----- Good Bye! -----\u0026#34;); System.exit(0); } else if(Objects.equals(splited[0], \u0026#34;login\u0026#34;)){ int index = login(splited, isLogin, userList); if( index != -1){ isLogin = true; user = userList.get(index); } } else if(Objects.equals(splited[0], \u0026#34;logout\u0026#34;)){ if(logout(splited, isLogin)){ isLogin = false; user = null; } } else if (Objects.equals(splited[0], \u0026#34;TunakTunakTun\u0026#34;)){ if(!isAdmin){ isAdmin = true; System.out.println(\u0026#34;DuluDulu\u0026#34;); } else { System.out.println(\u0026#34;WanNiBa\u0026#34;); } } else if (Objects.equals(splited[0], \u0026#34;NutKanutKanut\u0026#34;)){ if(isAdmin){ isAdmin = false; System.out.println(\u0026#34;DaDaDa\u0026#34;); } else { System.out.println(\u0026#34;WanNiBa\u0026#34;); } } else{ if(Objects.equals(splited[0], \u0026#34;addLine\u0026#34;)){ if(isAdmin){ addLine(lineList, splited); } else { System.out.println(\u0026#34;Command does not exist\u0026#34;); } } else if(Objects.equals(splited[0], \u0026#34;delLine\u0026#34;)){ if(isAdmin){ delLine(lineList, splited); } else { System.out.println(\u0026#34;Command does not exist\u0026#34;); } } else if(Objects.equals(splited[0], \u0026#34;addStation\u0026#34;)){ if(isAdmin){ addStation(lineList, splited); } else { System.out.println(\u0026#34;Command does not exist\u0026#34;); } } else if(Objects.equals(splited[0], \u0026#34;delStation\u0026#34;)){ if(isAdmin){ delStation(lineList, splited); } else { System.out.println(\u0026#34;Command does not exist\u0026#34;); } } else if(Objects.equals(splited[0], \u0026#34;lineInfo\u0026#34;)){ lineInfo(lineList, splited); } else if(Objects.equals(splited[0], \u0026#34;listLine\u0026#34;)){ if(splited.length == 1){ listLine(lineList); } else{ System.out.println(\u0026#34;Arguments illegal\u0026#34;); continue; } } else if(Objects.equals(splited[0], \u0026#34;addTrain\u0026#34;)){ if(isAdmin){ addTrain(lineList, trainList, splited); } else { System.out.println(\u0026#34;Command does not exist\u0026#34;); } } else if(Objects.equals(splited[0], \u0026#34;delTrain\u0026#34;)){ if(isAdmin){ delTrain(lineList, trainList, splited); } else { System.out.println(\u0026#34;Command does not exist\u0026#34;); } } else if(Objects.equals(splited[0], \u0026#34;checkTicket\u0026#34;)){ if(user.getAdmin() == false) { checkTicket(lineList, trainList, splited); } else{ System.out.println(\u0026#34;Command does not exist\u0026#34;); } } else if(Objects.equals(splited[0], \u0026#34;listTrain\u0026#34;)){ listTrain(lineList, trainList, splited); } else if(Objects.equals(splited[0], \u0026#34;buyTicket\u0026#34;)){ buyTicket(user, lineList, trainList, splited, isLogin); } else if(Objects.equals(splited[0], \u0026#34;listOrder\u0026#34;)){ if(splited.length == 1){ listOrder(user, isLogin); } else{ System.out.println(\u0026#34;Arguments illegal\u0026#34;); continue; } } else if(Objects.equals(splited[0], \u0026#34;rechargeBalance\u0026#34;)){ if(splited.length == 2){ rechargeBalance(user, isLogin, Double.parseDouble(splited[1])); } else{ System.out.println(\u0026#34;Arguments illegal\u0026#34;); continue; } } else if(Objects.equals(splited[0], \u0026#34;checkBalance\u0026#34;)){ if(splited.length == 1){ checkBalance(user, isLogin); } else{ System.out.println(\u0026#34;Arguments illegal\u0026#34;); continue; } } else if(Objects.equals(splited[0], \u0026#34;cancelOrder\u0026#34;)){ cancelOrder(user, lineList, trainList, splited, isLogin); } else if(Objects.equals(splited[0], \u0026#34;payOrder\u0026#34;)){ payOrder(user, splited, isLogin); } else if(Objects.equals(splited[0], \u0026#34;importCert\u0026#34;)){ if(isAdmin){ certMsg = importCert(certMsg, userList, splited); } else { System.out.println(\u0026#34;Command does not exist\u0026#34;); } } else { System.out.println(\u0026#34;Command does not exist\u0026#34;); } } } } private static HashMap\u0026lt;String, Boolean\u0026gt; importCert(HashMap\u0026lt;String, Boolean\u0026gt; certMsg, Vector\u0026lt;User\u0026gt; userList, String[] args) throws IOException { if(args.length != 2) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return certMsg; } try{ certMsg = Cert.read(certMsg, args[1], userList); } catch (IOException e){ throw new RuntimeException(); } return certMsg; } private static void payOrder(User user, String[] args, boolean isLogin) { if(args.length != 1) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } if(isLogin == false){ System.out.println(\u0026#34;Please login first\u0026#34;); return; } Vector\u0026lt;Order\u0026gt; orders = user.getOrders(); if(orders.size() == 0) { System.out.println(\u0026#34;No order\u0026#34;); } int discountNum; if(isStudent(user)){ Student student = (Student)user; discountNum = student.getDiscountNum(); } else { discountNum = 0 ; } double sum = 0; int orders_size = orders.size()-1; for(int i=orders_size;i\u0026gt;=0;i--){ Order order = orders.get(i); if(order.isPaid()){ continue; } if(discountNum \u0026gt;= order.getSeatNum()){ sum += order.getSum()*0.05; discountNum -= order.getSeatNum(); } else{ double single = order.getSingle(); sum += single*discountNum*0.05 + (order.getSeatNum()-discountNum)*single; discountNum = 0; } } if(sum\u0026lt;=user.getBalance()){ user.setOrders(orders); double balance = user.getBalance()-sum; user.setBalance(balance); for(int i=orders_size;i\u0026gt;=0;i--){ orders.get(i).setPaid(true); } System.out.println(\u0026#34;Payment success\u0026#34;); return; } else{ System.out.println(\u0026#34;Balance does not enough\u0026#34;); return; } } private static boolean isStudent(User user){ try { Student student = (Student) user; return true; } catch (Exception e) { return false; } } private static void cancelOrder(User user, Vector\u0026lt;Line\u0026gt; lineList, Vector\u0026lt;Train\u0026gt; trainList, String[] args, boolean isLogin) { if(args.length \u0026lt;= 5) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } if(isLogin == false){ System.out.println(\u0026#34;Please login first\u0026#34;); return; } String trainNum = args[1]; int trainIndex = trainExist(trainList, trainNum); if( trainIndex == -1){ System.out.println(\u0026#34;Train does not exist\u0026#34;); return; } Train train = trainList.get(trainIndex); Vector\u0026lt;Integer\u0026gt; ticket = train.getTicketNum(); Vector\u0026lt;Order\u0026gt; orders = user.getOrders(); int num = Integer.parseInt(args[5]); int sum = 0; int orders_size = orders.size()-1; for(int i=orders_size;i\u0026gt;=0;i--){ Order order = orders.get(i); if(order.isPaid()){ continue; } if(Objects.equals(args[1], order.getTrainNum())\u0026amp;\u0026amp;Objects.equals(args[2], order.getBegin())\u0026amp;\u0026amp;Objects.equals(args[3], order.getDestination())\u0026amp;\u0026amp;Objects.equals(args[4], order.getSeat())){ sum++; if(num\u0026lt;order.getSeatNum()){ int seatNum = order.getSeatNum() - num; order.setSeatNum(seatNum); order.setSum(seatNum * order.getSingle()); user.setOrders(orders); System.out.println(\u0026#34;Cancel success\u0026#34;); if(Objects.equals(args[4], \u0026#34;CC\u0026#34;) || Objects.equals(args[4], \u0026#34;SC\u0026#34;) || Objects.equals(args[4], \u0026#34;1A\u0026#34;)){ ticket.set(0, ticket.get(0) + num); train.setTicketNum(ticket); } else if(Objects.equals(args[4], \u0026#34;HC\u0026#34;) || (Objects.equals(args[4], \u0026#34;SB\u0026#34;) \u0026amp;\u0026amp; trainNum.charAt(0) == \u0026#39;0\u0026#39;)|| Objects.equals(args[4], \u0026#34;2A\u0026#34;)){ ticket.set(1, ticket.get(1) + num); train.setTicketNum(ticket); } else if(Objects.equals(args[4], \u0026#34;GG\u0026#34;) || (Objects.equals(args[4], \u0026#34;SB\u0026#34;) \u0026amp;\u0026amp; trainNum.charAt(0) == \u0026#39;G\u0026#39;)){ ticket.set(2, ticket.get(2) + num); train.setTicketNum(ticket); } return; } else if(num == order.getSeatNum()){ orders.remove(i); user.setOrders(orders); System.out.println(\u0026#34;Cancel success\u0026#34;); if(Objects.equals(args[4], \u0026#34;CC\u0026#34;) || Objects.equals(args[4], \u0026#34;SC\u0026#34;) || Objects.equals(args[4], \u0026#34;1A\u0026#34;)){ ticket.set(0, ticket.get(0) + num); train.setTicketNum(ticket); } else if(Objects.equals(args[4], \u0026#34;HC\u0026#34;) || (Objects.equals(args[4], \u0026#34;SB\u0026#34;) \u0026amp;\u0026amp; trainNum.charAt(0) == \u0026#39;0\u0026#39;)|| Objects.equals(args[4], \u0026#34;2A\u0026#34;)){ ticket.set(1, ticket.get(1) + num); train.setTicketNum(ticket); } else if(Objects.equals(args[4], \u0026#34;GG\u0026#34;) || (Objects.equals(args[4], \u0026#34;SB\u0026#34;) \u0026amp;\u0026amp; trainNum.charAt(0) == \u0026#39;G\u0026#39;)){ ticket.set(2, ticket.get(2) + num); train.setTicketNum(ticket); } return; } else{ num -= order.getSeatNum(); if(Objects.equals(args[4], \u0026#34;CC\u0026#34;) || Objects.equals(args[4], \u0026#34;SC\u0026#34;) || Objects.equals(args[4], \u0026#34;1A\u0026#34;)){ ticket.set(0, ticket.get(0) + order.getSeatNum()); train.setTicketNum(ticket); } else if(Objects.equals(args[4], \u0026#34;HC\u0026#34;) || (Objects.equals(args[4], \u0026#34;SB\u0026#34;) \u0026amp;\u0026amp; trainNum.charAt(0) == \u0026#39;0\u0026#39;)|| Objects.equals(args[4], \u0026#34;2A\u0026#34;)){ ticket.set(1, ticket.get(1) + order.getSeatNum()); train.setTicketNum(ticket); } else if(Objects.equals(args[4], \u0026#34;GG\u0026#34;) || (Objects.equals(args[4], \u0026#34;SB\u0026#34;) \u0026amp;\u0026amp; trainNum.charAt(0) == \u0026#39;G\u0026#39;)){ ticket.set(2, ticket.get(2) + order.getSeatNum()); train.setTicketNum(ticket); } orders.remove(i); } } } if(sum == 0){ System.out.println(\u0026#34;No such Record\u0026#34;); return; } else{ System.out.println(\u0026#34;No enough orders\u0026#34;); return; } } private static void checkBalance(User user, boolean isLogin) { if (!isLogin) { System.out.println(\u0026#34;Please login first\u0026#34;); return; } System.out.format(\u0026#34;UserName:%s\\nBalance:%.2f\\n\u0026#34;, user.getName(), user.getBalance()); } private static void rechargeBalance(User user, boolean isLogin, double num) { if(!isLogin){ System.out.println(\u0026#34;Please login first\u0026#34;); return; } if(num\u0026lt;0){ System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } double sum = num + user.getBalance(); user.setBalance(sum); System.out.println(\u0026#34;Recharge Success\u0026#34;); return; } private static void listOrder(User user, boolean isLogin) { if(!isLogin){ System.out.println(\u0026#34;Please login first\u0026#34;); return; } Vector\u0026lt;Order\u0026gt; orders = user.getOrders(); int i; if(orders.isEmpty()){ System.out.println(\u0026#34;No order\u0026#34;); return; } for(i=orders.size()-1;i\u0026gt;=0;i--){ Order order = orders.get(i); System.out.format(\u0026#34;[%s: %s-\u0026gt;%s] seat:%s num:%d price:%.2f paid:%c\\n\u0026#34;,order.getTrainNum(),order.getBegin(),order.getDestination(),order.getSeat(),order.getSeatNum(),order.getSum(),(order.isPaid()?\u0026#39;T\u0026#39;:\u0026#39;F\u0026#39;)); } } private static void buyTicket(User user, Vector\u0026lt;Line\u0026gt; lineList, Vector\u0026lt;Train\u0026gt; trainList, String[] args, boolean isLogin) { if(args.length \u0026lt;= 5) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } if(isLogin == false){ System.out.println(\u0026#34;Please login first\u0026#34;); return; } String trainNum = args[1]; int trainIndex = trainExist(trainList, trainNum); if( trainIndex == -1){ System.out.println(\u0026#34;Train does not exist\u0026#34;); return; } Train train = trainList.get(trainIndex); String lineName= train.getLine(); int lineIndex = findLine(lineList, lineName); Line line = lineList.get(lineIndex); int beginIndex = stationExist(line, args[2]); int destIndex = stationExist(line, args[3]); if(beginIndex == -1 || destIndex == -1){ System.out.println(\u0026#34;Station does not exist\u0026#34;); return; } Vector\u0026lt;Integer\u0026gt; mileage = line.getStationMileage(); int distance = abs(mileage.get(destIndex) - mileage.get(beginIndex)); Vector\u0026lt;Integer\u0026gt; ticket = train.getTicketNum(); Vector\u0026lt;Double\u0026gt; price = train.getTicketPrice(); int rest = 0; double prices = 0; int num = 100000; if(isInt(args[5])) { num = Integer.valueOf(args[5]); } if(trainNum.charAt(0) == \u0026#39;0\u0026#39;){ if(Objects.equals(args[4], \u0026#34;CC\u0026#34;)){ rest = ticket.get(0); prices = price.get(0); if(rest\u0026gt;num){ ticket.set(0, rest - num); train.setTicketNum(ticket); } } else if(Objects.equals(args[4], \u0026#34;SB\u0026#34;)){ rest = ticket.get(1); prices = price.get(1); if(rest\u0026gt;num){ ticket.set(1, rest - num); train.setTicketNum(ticket); } } else if(Objects.equals(args[4], \u0026#34;GG\u0026#34;)){ rest = ticket.get(2); prices = price.get(2); if(rest\u0026gt;num){ ticket.set(2, rest - num); train.setTicketNum(ticket); } } else{ System.out.println(\u0026#34;Seat does not match\u0026#34;); return; } } else if(trainNum.charAt(0) == \u0026#39;G\u0026#39;){ if(Objects.equals(args[4], \u0026#34;SC\u0026#34;)){ rest = ticket.get(0); prices = price.get(0); if(rest\u0026gt;num){ ticket.set(0, rest - num); train.setTicketNum(ticket); } } else if(Objects.equals(args[4], \u0026#34;HC\u0026#34;)){ rest = ticket.get(1); prices = price.get(1); if(rest\u0026gt;num){ ticket.set(1, rest - num); train.setTicketNum(ticket); } } else if(Objects.equals(args[4], \u0026#34;SB\u0026#34;)){ rest = ticket.get(2); prices = price.get(2); if(rest\u0026gt;num){ ticket.set(2, rest - num); train.setTicketNum(ticket); } } else{ System.out.println(\u0026#34;Seat does not match\u0026#34;); return; } } else if(trainNum.charAt(0) == \u0026#39;K\u0026#39;){ if(Objects.equals(args[4], \u0026#34;1A\u0026#34;)){ if (user.isCert()){ System.out.println(\u0026#34;Cert illegal\u0026#34;); return; } rest = ticket.get(0); prices = price.get(0); if(rest\u0026gt;num){ ticket.set(0, rest - num); train.setTicketNum(ticket); } } else if(Objects.equals(args[4], \u0026#34;2A\u0026#34;)){ if (user.isCert()){ System.out.println(\u0026#34;Cert illegal\u0026#34;); return; } rest = ticket.get(1); prices = price.get(1); if(rest\u0026gt;num){ ticket.set(1, rest - num); train.setTicketNum(ticket); } } else{ System.out.println(\u0026#34;Seat does not match\u0026#34;); return; } } if(!isInt(args[5]) || Integer.valueOf(args[5])\u0026lt;=0){ System.out.println(\u0026#34;Ticket number illegal\u0026#34;); return; } else{ if(num \u0026gt; rest){ System.out.println(\u0026#34;Ticket does not enough\u0026#34;); return; } } Vector\u0026lt;Order\u0026gt; orders= user.getOrders(); Order order = new Order(); order.setTrainNum(args[1]); order.setBegin(args[2]); order.setDestination(args[3]); order.setSeat(args[4]); order.setSeatNum(num); order.setSingle(prices*distance); order.setSum(num*prices*distance); orders.addElement(order); user.setOrders(orders); System.out.println(\u0026#34;Thanks for your order\u0026#34;); return; } private static boolean logout(String[] args, boolean isLogin){ if(args.length!=1){ System.out.println(\u0026#34;Arguments illegal\u0026#34;); return false; } if(isLogin) { System.out.println(\u0026#34;Logout success\u0026#34;); return true; } else{ System.out.println(\u0026#34;No user has logged in\u0026#34;); return false; } } private static int login(String[] args, boolean isLogin, Vector\u0026lt;User\u0026gt; userList){ if(args.length!=3){ System.out.println(\u0026#34;Arguments illegal\u0026#34;); return -1; } else if(isLogin == true){ System.out.println(\u0026#34;You have logged in\u0026#34;); return -1; } String card = args[1]; String name = args[2]; boolean isExist = false; int i; for(i=0;i\u0026lt; userList.size();i++){ if(Objects.equals(userList.get(i).getAadhaar(), card)){ isExist = true; break; } } if(!isExist){ System.out.println(\u0026#34;User does not exist\u0026#34;); return -1; } if(!Objects.equals(userList.get(i).getName(), name)){ System.out.println(\u0026#34;Wrong name\u0026#34;); return -1; } System.out.println(\u0026#34;Login success\u0026#34;); return i; } private static void listTrain(Vector\u0026lt;Line\u0026gt; lineList, Vector\u0026lt;Train\u0026gt; trainList, String[] args) { if(args.length == 1) { int i; int trainInLine = 1; for(i=0;i\u0026lt;trainList.size();i++){ Train train = trainList.get(i); Vector\u0026lt;Double\u0026gt; price = train.getTicketPrice(); Vector\u0026lt;Integer\u0026gt; ticket = train.getTicketNum(); String trainNum = train.getTrainNum(); if(trainNum.charAt(0) == \u0026#39;0\u0026#39;){ System.out.format(\u0026#34;[%d] %s: %s [CC]%.2f:%d [SB]%.2f:%d [GG]%.2f:%d\\n\u0026#34;,trainInLine, trainNum, train.getLine(), price.get(0), ticket.get(0), price.get(1), ticket.get(1), price.get(2), ticket.get(2)); } else if(trainNum.charAt(0) == \u0026#39;G\u0026#39;){ System.out.format(\u0026#34;[%d] %s: %s [SC]%.2f:%d [HC]%.2f:%d [SB]%.2f:%d\\n\u0026#34;,trainInLine, trainNum, train.getLine(), price.get(0), ticket.get(0), price.get(1), ticket.get(1), price.get(2), ticket.get(2)); } else if(trainNum.charAt(0) == \u0026#39;K\u0026#39;){ System.out.format(\u0026#34;[%d] %s: %s [1A]%.2f:%d [2A]%.2f:%d\\n\u0026#34;,trainInLine, trainNum, train.getLine(), price.get(0), ticket.get(0), price.get(1), ticket.get(1)); } trainInLine++; } if(trainInLine == 1) { System.out.println(\u0026#34;No Trains\u0026#34;); } return; } String lineNum = args[1]; if(lineExist(lineList, lineNum) == -1) { System.out.println(\u0026#34;Line does not exist\u0026#34;); return; } int i; int trainInLine = 1; for(i=0;i\u0026lt;trainList.size();i++){ Train train = trainList.get(i); Vector\u0026lt;Double\u0026gt; price = train.getTicketPrice(); Vector\u0026lt;Integer\u0026gt; ticket = train.getTicketNum(); String trainNum = train.getTrainNum(); if(Objects.equals(train.getLine(), lineNum)){ if(trainNum.charAt(0) == \u0026#39;0\u0026#39;){ System.out.format(\u0026#34;[%d] %s: %s [CC]%.2f:%d [SB]%.2f:%d [GG]%.2f:%d\\n\u0026#34;,trainInLine, trainNum, lineNum, price.get(0), ticket.get(0), price.get(1), ticket.get(1), price.get(2), ticket.get(2)); } else if(trainNum.charAt(0) == \u0026#39;G\u0026#39;){ System.out.format(\u0026#34;[%d] %s: %s [SC]%.2f:%d [HC]%.2f:%d [SB]%.2f:%d\\n\u0026#34;,trainInLine, trainNum, lineNum, price.get(0), ticket.get(0), price.get(1), ticket.get(1), price.get(2), ticket.get(2)); } else if(trainNum.charAt(0) == \u0026#39;K\u0026#39;){ System.out.format(\u0026#34;[%d] %s: %s [1A]%.2f:%d [2A]%.2f:%d\\n\u0026#34;,trainInLine, trainNum, lineNum, price.get(0), ticket.get(0), price.get(1), ticket.get(1)); } trainInLine++; } } if(trainInLine == 1) { System.out.println(\u0026#34;No Trains\u0026#34;); } } private static int lineExist(Vector\u0026lt;Line\u0026gt; lineList, String lineNum){ int i; for(i=0;i\u0026lt;lineList.size();i++){ if(Objects.equals(lineList.get(i).getLine(), lineNum)){ return i; } } return -1; } private static void checkTicket(Vector\u0026lt;Line\u0026gt; lineList, Vector\u0026lt;Train\u0026gt; trainList, String[] args) { if(args.length \u0026lt; 5) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } String trainNum = args[1]; if(trainNum.length() \u0026lt; 5){ System.out.println(\u0026#34;Train serial illegal\u0026#34;); return; } if(!(isNum(trainNum.charAt(1)) \u0026amp;\u0026amp; isNum(trainNum.charAt(2)) \u0026amp;\u0026amp; isNum(trainNum.charAt(3)) \u0026amp;\u0026amp; isNum(trainNum.charAt(4)))){ System.out.println(\u0026#34;Train serial illegal\u0026#34;); return; } int trainIndex = trainExist(trainList, trainNum); if( trainIndex == -1){ System.out.println(\u0026#34;Train serial does not exist\u0026#34;); return; } Train train = trainList.get(trainIndex); String lineName= train.getLine(); int lineIndex = findLine(lineList, lineName); Line line = lineList.get(lineIndex); int beginIndex = stationExist(line, args[2]); int destIndex = stationExist(line, args[3]); if(beginIndex == -1 || destIndex == -1){ System.out.println(\u0026#34;Station does not exist\u0026#34;); return; } Vector\u0026lt;Integer\u0026gt; mileage = line.getStationMileage(); int distance = abs(mileage.get(destIndex) - mileage.get(beginIndex)); Vector\u0026lt;Integer\u0026gt; ticket = train.getTicketNum(); Vector\u0026lt;Double\u0026gt; price = train.getTicketPrice(); if(trainNum.charAt(0) == \u0026#39;0\u0026#39;){ if(Objects.equals(args[4], \u0026#34;CC\u0026#34;)){ System.out.format(\u0026#34;[%s: %s-\u0026gt;%s] seat:CC remain:%d distance:%d price:%.2f\\n\u0026#34;,trainNum, args[2], args[3], ticket.get(0), distance, distance*price.get(0)); } else if(Objects.equals(args[4], \u0026#34;SB\u0026#34;)){ System.out.format(\u0026#34;[%s: %s-\u0026gt;%s] seat:SB remain:%d distance:%d price:%.2f\\n\u0026#34;,trainNum, args[2], args[3], ticket.get(1), distance, distance*price.get(1)); } else if(Objects.equals(args[4], \u0026#34;GG\u0026#34;)){ System.out.format(\u0026#34;[%s: %s-\u0026gt;%s] seat:GG remain:%d distance:%d price:%.2f\\n\u0026#34;,trainNum, args[2], args[3], ticket.get(2), distance, distance*price.get(2)); } else{ System.out.println(\u0026#34;Seat does not match\u0026#34;); return; } } else if(trainNum.charAt(0) == \u0026#39;G\u0026#39;){ if(Objects.equals(args[4], \u0026#34;SC\u0026#34;)){ System.out.format(\u0026#34;[%s: %s-\u0026gt;%s] seat:SC remain:%d distance:%d price:%.2f\\n\u0026#34;,trainNum, args[2], args[3], ticket.get(0), distance, distance*price.get(0)); } else if(Objects.equals(args[4], \u0026#34;HC\u0026#34;)){ System.out.format(\u0026#34;[%s: %s-\u0026gt;%s] seat:HC remain:%d distance:%d price:%.2f\\n\u0026#34;,trainNum, args[2], args[3], ticket.get(1), distance, distance*price.get(1)); } else if(Objects.equals(args[4], \u0026#34;SB\u0026#34;)){ System.out.format(\u0026#34;[%s: %s-\u0026gt;%s] seat:SB remain:%d distance:%d price:%.2f\\n\u0026#34;,trainNum, args[2], args[3], ticket.get(2), distance, distance*price.get(2)); } else{ System.out.println(\u0026#34;Seat does not match\u0026#34;); return; } } else if(trainNum.charAt(0) == \u0026#39;K\u0026#39;){ if(Objects.equals(args[4], \u0026#34;1A\u0026#34;)){ System.out.format(\u0026#34;[%s: %s-\u0026gt;%s] seat:1A remain:%d distance:%d price:%.2f\\n\u0026#34;,trainNum, args[2], args[3], ticket.get(0), distance, distance*price.get(0)); } else if(Objects.equals(args[4], \u0026#34;2A\u0026#34;)){ System.out.format(\u0026#34;[%s: %s-\u0026gt;%s] seat:2A remain:%d distance:%d price:%.2f\\n\u0026#34;,trainNum, args[2], args[3], ticket.get(1), distance, distance*price.get(1)); } else{ System.out.println(\u0026#34;Seat does not match\u0026#34;); return; } } } private static void delTrain(Vector\u0026lt;Line\u0026gt; lineList, Vector\u0026lt;Train\u0026gt; trainList, String[] args) { if(args.length \u0026lt; 2) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } String trainNum = args[1]; int exist = trainExist(trainList, trainNum); if(exist== -1){ System.out.println(\u0026#34;Train does not exist\u0026#34;); return; } else{ Train train = trainList.get(exist); String lineNum = train.getLine(); int lineIndex = lineExist(lineList, lineNum); Line line = lineList.get(lineIndex); int used = line.getUsedCapacity(); used--; line.setUsedCapacity(used); trainList.remove(exist); System.out.println(\u0026#34;Del Train Success\u0026#34;); } } private static int checkTrainSerial(String trainNum, Train train, int num){ int len = trainNum.length(); if(len!=5){ System.out.println(\u0026#34;Train serial illegal\u0026#34;); return 0; } if(!(isNum(trainNum.charAt(1)) \u0026amp;\u0026amp; isNum(trainNum.charAt(2)) \u0026amp;\u0026amp; isNum(trainNum.charAt(3)) \u0026amp;\u0026amp; isNum(trainNum.charAt(4)))){ System.out.println(\u0026#34;Train serial illegal\u0026#34;); return 0; } if(num == 7) { if(trainNum.charAt(0) == \u0026#39;K\u0026#39;){ train.setTrainType(\u0026#34;Koya\u0026#34;); } else if(trainNum.charAt(0) == \u0026#39;0\u0026#39;||trainNum.charAt(0) == \u0026#39;G\u0026#39;){ System.out.println(\u0026#34;Arguments illegal\u0026#34;); return 0; } else{ System.out.println(\u0026#34;Train serial illegal\u0026#34;); return 0; } } else if (num == 9) { if (trainNum.charAt(0) == \u0026#39;0\u0026#39;) { train.setTrainType(\u0026#34;Normal\u0026#34;); } else if (trainNum.charAt(0) == \u0026#39;G\u0026#39;) { train.setTrainType(\u0026#34;Gatimaan\u0026#34;); } else if(trainNum.charAt(0) == \u0026#39;K\u0026#39;){ System.out.println(\u0026#34;Arguments illegal\u0026#34;); return 0; }else { System.out.println(\u0026#34;Train serial illegal\u0026#34;); return 0; } } return 1; } private static void addTrain(Vector\u0026lt;Line\u0026gt; lineList, Vector\u0026lt;Train\u0026gt; trainList, String[] args) { int num = args.length; if(num!=7 \u0026amp;\u0026amp; num!= 9) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } String trainNum = args[1]; Train train = new Train(); if(checkTrainSerial(trainNum, train, num) == 0){ return; } if(trainExist(trainList, trainNum) != -1){ System.out.println(\u0026#34;Train serial duplicate\u0026#34;); return; } train.setTrainNum(trainNum); String lineName = args[2]; int i = findLine(lineList, lineName); if(i == -1){ System.out.println(\u0026#34;Line illegal\u0026#34;); return; } train.setLine(lineName); Line line = lineList.get(i); int used = line.getUsedCapacity(); int capacity = line.getCapacity(); if(used\u0026gt;=capacity){ System.out.println(\u0026#34;Line illegal\u0026#34;); return; } Vector\u0026lt;Double\u0026gt; ticketPrice = train.getTicketPrice(); if(!(isDouble(args[3]) \u0026amp;\u0026amp; isDouble(args[5]))){ System.out.println(\u0026#34;Price illegal\u0026#34;); return; } if(Double.valueOf(args[3])\u0026lt;0 || Double.valueOf(args[5])\u0026lt;0){ System.out.println(\u0026#34;Price illegal\u0026#34;); return; } ticketPrice.addElement(Double.valueOf(args[3])); ticketPrice.addElement(Double.valueOf(args[5])); train.setTicketPrice(ticketPrice); if(num == 9) { if (!isDouble(args[7])) { System.out.println(\u0026#34;Price illegal\u0026#34;); return; } if (Double.valueOf(args[7]) \u0026lt; 0) { System.out.println(\u0026#34;Price illegal\u0026#34;); return; } ticketPrice = train.getTicketPrice(); ticketPrice.addElement(Double.valueOf(args[7])); train.setTicketPrice(ticketPrice); } if(!(isInt(args[4]) \u0026amp;\u0026amp; isInt(args[6]))){ System.out.println(\u0026#34;Ticket num illegal\u0026#34;); return; } Vector\u0026lt;Integer\u0026gt; ticketNum = train.getTicketNum(); if(Integer.valueOf(args[4])\u0026lt;0 || Integer.valueOf(args[6])\u0026lt;0){ System.out.println(\u0026#34;Ticket num illegal\u0026#34;); return; } ticketNum.addElement(Integer.valueOf(args[4])); ticketNum.addElement(Integer.valueOf(args[6])); train.setTicketNum(ticketNum); if (num == 9){ if(!isInt(args[8])){ System.out.println(\u0026#34;Ticket num illegal\u0026#34;); return; } if(Integer.valueOf(args[8])\u0026lt;0){ System.out.println(\u0026#34;Ticket num illegal\u0026#34;); return; } ticketNum = train.getTicketNum(); ticketNum.addElement(Integer.valueOf(args[8])); train.setTicketNum(ticketNum); } used++; line.setUsedCapacity(used); // 按列车号添加  if(trainList.isEmpty()){ trainList.addElement(train); System.out.println(\u0026#34;Add Train Success\u0026#34;); return; } for(i=0;i\u0026lt;trainList.size();i++){ Train train2 = trainList.get(i); String train2Num = train2.getTrainNum(); if(trainNum.charAt(0)\u0026gt;train2Num.charAt(0)){ trainList.add(i, train); break; } else if(trainNum.charAt(0)\u0026lt;train2Num.charAt(0)){ continue; } else if(trainNum.compareTo(train2Num)\u0026lt;0){ trainList.add(i, train); break; } } if(i==trainList.size()){ trainList.add(i, train); } System.out.println(\u0026#34;Add Train Success\u0026#34;); } private static int trainExist(Vector\u0026lt;Train\u0026gt; trainList, String trainNum) { for (int i = 0; i \u0026lt; trainList.size(); i++) { Train train = trainList.get(i); if(Objects.equals(train.getTrainNum(), trainNum)){ return i; } } return -1; } private static boolean isNum(char charAt) { if(charAt\u0026gt;=\u0026#39;0\u0026#39;\u0026amp;\u0026amp;charAt\u0026lt;=\u0026#39;9\u0026#39;) { return true; } else { return false; } } private static void listLine(Vector\u0026lt;Line\u0026gt; lineList){ int i; if(lineList.isEmpty()){ System.out.println(\u0026#34;No Lines\u0026#34;); return; } for(i=0;i\u0026lt;lineList.size();i++){ Line line = lineList.get(i); line.toString(i+1); } } private static void lineInfo(Vector\u0026lt;Line\u0026gt; lineList, String[] args) { if(args.length \u0026lt; 2) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } int index = findLine(lineList, args[1]); if( index == -1){ System.out.println(\u0026#34;Line does not exist\u0026#34;); } else{ lineList.get(index).toString(); } } private static void addStation(Vector\u0026lt;Line\u0026gt; lineList, String[] args) { if(args.length \u0026lt; 4) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } if(!isInt(args[3])){ System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } if(Integer.valueOf(args[3])\u0026lt;0){ System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } int i = findLine(lineList, args[1]); int len = args.length; if(i == -1){ System.out.println(\u0026#34;Line does not exist\u0026#34;); } else{ Line line = lineList.get(i); if(stationExist(line, args[2]) != -1){ System.out.println(\u0026#34;Station duplicate\u0026#34;); } else{ int position = stationPosition(line, Integer.parseInt(args[3])); line.station.add(position, args[2]); line.stationMileage.add(position, Integer.valueOf(args[3])); System.out.println(\u0026#34;Add Station success\u0026#34;); } } } private static int stationPosition(Line line, int mileage) { Vector\u0026lt;Integer\u0026gt; stationMileage = line.getStationMileage(); int i; for(i=0;i\u0026lt;stationMileage.size();i++){ if(mileage\u0026lt;stationMileage.get(i)){ return i; } } return stationMileage.size(); } private static void delStation(Vector\u0026lt;Line\u0026gt; lineList, String[] args){ if(args.length \u0026lt; 3) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } int i = findLine(lineList, args[1]); int j = stationExist(lineList.get(i), args[2]); if( j != -1){ Line line = lineList.get(i); line.getStation().remove(j); line.getStationMileage().remove(j); System.out.println(\u0026#34;Delete Station success\u0026#34;); } else{ System.out.println(\u0026#34;Station does not exist\u0026#34;); } } private static void delLine(Vector\u0026lt;Line\u0026gt; lineList, String[] args){ if(args.length \u0026lt; 2){ System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } for (int i = 0; i \u0026lt; lineList.size(); i++) { Line line = lineList.get(i); if(Objects.equals(line.getLine(), args[1])){ lineList.remove(i); System.out.println(\u0026#34;Del Line success\u0026#34;); return; } } System.out.println(\u0026#34;Line does not exist\u0026#34;); } private static void addLine(Vector\u0026lt;Line\u0026gt; lineList, String[] args){ int num = (args.length - 3) / 2; if(args.length % 2==0){ System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } if(args.length \u0026lt; 3) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } if(lineList.isEmpty()){ } else if(findLine(lineList, args[1]) != -1){ System.out.println(\u0026#34;Line already exists\u0026#34;); return; } if(isInt(args[2]) == false) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); return; } if(Integer.parseInt(args[2]) \u0026lt;= 0) { System.out.println(\u0026#34;Capacity illegal\u0026#34;); return; } Line line = new Line(); line.setLine(args[1]); line.setCapacity(Integer.parseInt(args[2])); int i; for(i=1; i\u0026lt;=num; i++){ if(isInt(args[2*i+2]) == false) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); break; } else if(stationExist(line, args[2*i+1]) != -1){ System.out.println(\u0026#34;Station duplicate\u0026#34;); break; } else { int j; Vector\u0026lt;Integer\u0026gt; mileage = line.getStationMileage(); for(j=0;j\u0026lt;mileage.size();j++){ if(Integer.parseInt(args[2*i+2])\u0026lt;mileage.get(j)){ line.addStation(line, j, args[2*i+1], Integer.parseInt(args[2*i+2])); break; } } if(j==mileage.size()){ line.addStation(line, j, args[2*i+1], Integer.parseInt(args[2*i+2])); } } } if(i == num+1) { int j; String lineName = line.getLine(); if(lineList.isEmpty()){ lineList.addElement(line); } else{ for(j=0;j\u0026lt;lineList.size();j++){ Line line2 = lineList.get(j); if(lineName.compareTo(line2.getLine())\u0026lt;0){ lineList.add(j, line); break; } } if(j==lineList.size()){ lineList.add(j, line); } } System.out.println(\u0026#34;Add Line success\u0026#34;); } return; } private static int findLine(Vector\u0026lt;Line\u0026gt; lineList, String lineName){ for (int i = 0; i \u0026lt; lineList.size(); i++) { Line line = lineList.get(i); if(Objects.equals(line.getLine(), lineName)){ return i; } } return -1; } private static int stationExist(Line line, String stationName){ Vector\u0026lt;String\u0026gt; station = line.getStation(); return station.indexOf(stationName); } public static boolean isInt(String str){ try { int num=Integer.valueOf(str); return true; } catch (Exception e) { return false; } } public static boolean isDouble(String str){ try { double num=Double.valueOf(str); return true; } catch (Exception e) { return false; } } public static void addUser(Vector\u0026lt;User\u0026gt; userList, String[] splited){ if(splited.length == 4){ User user = new User(); User.setString(userList, user, splited); return; } else if(splited.length == 5){ Student student = new Student(); student.setDiscountNum(Integer.parseInt(splited[4])); Student.setString(userList, student, splited); return; } return; } } class Train{ private String trainType; private String trainNum; private String line; private Vector\u0026lt;Double\u0026gt; ticketPrice = new Vector\u0026lt;Double\u0026gt;(); private Vector\u0026lt;Integer\u0026gt; ticketNum = new Vector\u0026lt;Integer\u0026gt;(); public String getLine() { return line; } public void setLine(String line) { this.line = line; } public String getTrainNum() { return trainNum; } public void setTrainNum(String trainNum) { this.trainNum = trainNum; } public String getTrainType() { return trainType; } public void setTrainType(String trainType) { this.trainType = trainType; } public Vector\u0026lt;Double\u0026gt; getTicketPrice() { return ticketPrice; } public void setTicketPrice(Vector\u0026lt;Double\u0026gt; ticketPrice) { this.ticketPrice = ticketPrice; } public Vector\u0026lt;Integer\u0026gt; getTicketNum() { return ticketNum; } public void setTicketNum(Vector\u0026lt;Integer\u0026gt; ticketNum) { this.ticketNum = ticketNum; } } class Station{ private String name; public String getName(){ return name; } public void setName(String stationName){ name = stationName; } } class Line{ private String line; private int capacity; public Vector\u0026lt;String\u0026gt; station = new Vector\u0026lt;String\u0026gt;(); public Vector\u0026lt;Integer\u0026gt; stationMileage = new Vector\u0026lt;Integer\u0026gt;(); private int usedCapacity; public String toString(){ System.out.format(\u0026#34;%s %d/%d\u0026#34;,getLine(), getUsedCapacity(), getCapacity()); int i; for(i=0;i\u0026lt; station.size();i++){ System.out.format(\u0026#34; %s:%d\u0026#34;,getStation().get(i),getStationMileage().get(i)); } System.out.print(\u0026#34;\\n\u0026#34;); return null; } public String toString(int index){ System.out.format(\u0026#34;[%d] %s %d/%d\u0026#34;,index, getLine(), getUsedCapacity(), getCapacity()); int i; for(i=0;i\u0026lt; station.size();i++){ System.out.format(\u0026#34; %s:%d\u0026#34;,getStation().get(i),getStationMileage().get(i)); } System.out.print(\u0026#34;\\n\u0026#34;); return null; } public int getUsedCapacity() { return usedCapacity; } public void setUsedCapacity(int usedCapacity) { this.usedCapacity = usedCapacity; } public Vector\u0026lt;String\u0026gt; getStation(){ return station; } public Vector\u0026lt;Integer\u0026gt; getStationMileage(){ return stationMileage; } public void setStation(String name, int mileage){ station.addElement(name); stationMileage.addElement(mileage); } public String getLine(){ return line; } public void setLine(String lineName){ line = lineName; } public int getCapacity(){ return capacity; } public void setCapacity(int lineCapacity){ capacity = lineCapacity; } public void addStation(Line line, int index, String stationName, int mileage){ line.station.add(index, stationName); line.stationMileage.add(index, mileage); } } class Order{ private String trainNum; private String begin; private String destination; private String seat; private int seatNum; private double single; private double sum; private boolean paid = false; public double getSingle() { return single; } public void setSingle(double single) { this.single = single; } public boolean isPaid() { return paid; } public void setPaid(boolean paid) { this.paid = paid; } public String getTrainNum() { return trainNum; } public int getSeatNum() { return seatNum; } public String getBegin() { return begin; } public String getDestination() { return destination; } public String getSeat() { return seat; } public double getSum() { return sum; } public void setTrainNum(String trainNum) { this.trainNum = trainNum; } public void setBegin(String begin) { this.begin = begin; } public void setDestination(String destination) { this.destination = destination; } public void setSeat(String seat) { this.seat = seat; } public void setSeatNum(int seatNum) { this.seatNum = seatNum; } public void setSum(double sum) { this.sum = sum; } } class User { private String name; private String sex; private String Aadhaar; private boolean admin; private boolean isLogin; private double balance = 0; Vector\u0026lt;Order\u0026gt; orders = new Vector\u0026lt;Order\u0026gt;(); private boolean cert = true; public double getBalance() { return balance; } public void setBalance(double balance) { this.balance = balance; } public boolean isCert() { return cert; } public void setCert(boolean cert) { this.cert = cert; } public Vector\u0026lt;Order\u0026gt; getOrders() { return orders; } public void setOrders(Vector\u0026lt;Order\u0026gt; orders) { this.orders = orders; } public boolean isLogin() { return isLogin; } public void setLogin(boolean login) { isLogin = login; } public boolean getAdmin() { return admin; } public void setAdmin(boolean isAdmin) { admin = isAdmin; } public String getName() { return name; } public void setName(String myName) { name = myName; } public String getSex() { return sex; } public void setSex(String mySex) { sex = mySex; } public String getAadhaar() { return Aadhaar; } public void setAadhaar(String myAadhaar) { Aadhaar = myAadhaar; } @Override public String toString() { System.out.println(\u0026#34;Name:\u0026#34; + getName()); System.out.println(\u0026#34;Sex:\u0026#34; + getSex()); System.out.println(\u0026#34;Aadhaar:\u0026#34; + getAadhaar()); return null; } public static boolean str(String str) { final String number = \u0026#34;0123456789\u0026#34;; char[] ch = str.toCharArray(); if (ch.length == 0) { return false; } else { boolean is = true; if (number.indexOf(ch[0]) == -1) { for (int i = 0; i \u0026lt; ch.length; i++) { if ((ch[i] \u0026gt;= 65 \u0026amp;\u0026amp; ch[i] \u0026lt;= 90) || (ch[i] \u0026gt;= 97 \u0026amp;\u0026amp; ch[i] \u0026lt;= 122) || ch[i] == 95) { } else { is = false; } } return is; } else { return false; } } } public static boolean card(String cardNum, String sex) { char[] ch = cardNum.toCharArray(); boolean is = true; int num1 = (ch[0] - \u0026#39;0\u0026#39;) * 1000 + (ch[1] - \u0026#39;0\u0026#39;) * 100 + (ch[2] - \u0026#39;0\u0026#39;) * 10 + (ch[3] - \u0026#39;0\u0026#39;); int num2 = (ch[4] - \u0026#39;0\u0026#39;) * 1000 + (ch[5] - \u0026#39;0\u0026#39;) * 100 + (ch[6] - \u0026#39;0\u0026#39;) * 10 + (ch[7] - \u0026#39;0\u0026#39;); int num3 = (ch[8] - \u0026#39;0\u0026#39;) * 100 + (ch[9] - \u0026#39;0\u0026#39;) * 10 + (ch[10] - \u0026#39;0\u0026#39;); if (num1 == 0 || num1 \u0026gt; 1237) { is = false; } if (num2 \u0026lt; 20 || num2 \u0026gt; 460) { is = false; } if (num3 \u0026gt; 100) { is = false; } if (Objects.equals(sex, \u0026#34;F\u0026#34;) \u0026amp;\u0026amp; (ch[11] - \u0026#39;0\u0026#39;) != 0) { is = false; } if (Objects.equals(sex, \u0026#34;M\u0026#34;) \u0026amp;\u0026amp; (ch[11] - \u0026#39;0\u0026#39;) != 1) { is = false; } if (Objects.equals(sex, \u0026#34;O\u0026#34;) \u0026amp;\u0026amp; (ch[11] - \u0026#39;0\u0026#39;) != 2) { is = false; } return is; } public static boolean repeat(Vector\u0026lt;User\u0026gt; userlist, String cardNum) { boolean is = true; for(int i=0;i\u0026lt; userlist.size();i++) { if (Objects.equals(userlist.get(i).getAadhaar(), cardNum)) { return true; } } return false; } public static void setString(Vector\u0026lt;User\u0026gt; userlist, User user, String[] args) { // System.out.println(args.length);  if (args.length != 4) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); } else { // System.out.println(args[2]);  if (!str(args[1])) { System.out.println(\u0026#34;Name illegal\u0026#34;); } else if (!Objects.equals(args[2], \u0026#34;F\u0026#34;) \u0026amp;\u0026amp; !Objects.equals(args[2], \u0026#34;M\u0026#34;) \u0026amp;\u0026amp; !Objects.equals(args[2], \u0026#34;O\u0026#34;)) { System.out.println(\u0026#34;Sex illegal\u0026#34;); } else if (!card(args[3], args[2])) { System.out.println(\u0026#34;Aadhaar number illegal\u0026#34;); } else if (repeat(userlist, args[3])) { System.out.println(\u0026#34;Aadhaar number exist\u0026#34;); } else { user.setName(args[1]); user.setSex(args[2]); user.setAadhaar(args[3]); user.setAdmin(false); user.setLogin(false); userlist.addElement(user); user.toString(); } } } } class Student extends User { private int discountNum; public void setDiscountNum(int discountNum) { this.discountNum = discountNum; } public int getDiscountNum() { return discountNum; } @Override public String toString() { System.out.println(\u0026#34;Name:\u0026#34; + getName()); System.out.println(\u0026#34;Sex:\u0026#34; + getSex()); System.out.println(\u0026#34;Aadhaar:\u0026#34; + getAadhaar()); System.out.println(\u0026#34;Discount:\u0026#34; + getDiscountNum()); return null; } public static void setString(Vector\u0026lt;User\u0026gt; userlist, User user, String[] args) { // System.out.println(args.length);  if (args.length != 5) { System.out.println(\u0026#34;Arguments illegal\u0026#34;); } else { // System.out.println(args[2]);  if (!str(args[1])) { System.out.println(\u0026#34;Name illegal\u0026#34;); } else if (!Objects.equals(args[2], \u0026#34;F\u0026#34;) \u0026amp;\u0026amp; !Objects.equals(args[2], \u0026#34;M\u0026#34;) \u0026amp;\u0026amp; !Objects.equals(args[2], \u0026#34;O\u0026#34;)) { System.out.println(\u0026#34;Sex illegal\u0026#34;); } else if (!card(args[3], args[2])) { System.out.println(\u0026#34;Aadhaar number illegal\u0026#34;); } else if (repeat(userlist, args[3])) { System.out.println(\u0026#34;Aadhaar number exist\u0026#34;); } else { user.setName(args[1]); user.setSex(args[2]); user.setAadhaar(args[3]); user.setAdmin(false); user.setLogin(false); userlist.addElement(user); user.toString(); } } } } class Cert{ public static boolean isFile(String fileName){ try { BufferedReader br = new BufferedReader(new FileReader(fileName)); return true; } catch (Exception e) { return false; } } public static HashMap\u0026lt;String, Boolean\u0026gt; read(HashMap\u0026lt;String, Boolean\u0026gt; cert, String fileName, Vector\u0026lt;User\u0026gt; userList) throws IOException { // fileName = \u0026#34;CTS1\\\\\u0026#34; + fileName;  if(isFile((fileName))){ try { BufferedReader br = new BufferedReader(new FileReader(fileName)); String line; while ((line = br.readLine()) != null) { String[] lines = line.split(\u0026#34;,\u0026#34;); cert.put(lines[0], lines[1].equals(\u0026#34;P\u0026#34;)); } br.close(); } catch(IOException e){ throw new RuntimeException(); } Iterator\u0026lt;Map.Entry\u0026lt;String, Boolean\u0026gt;\u0026gt; iterator = cert.entrySet().iterator(); int positive = 0, negative = 0; while (iterator.hasNext()) { Map.Entry\u0026lt;String, Boolean\u0026gt; entry = iterator.next(); if(entry.getValue()){ positive++; } else{ negative++; } String userCard = entry.getKey(); for(int i=0;i\u0026lt;userList.size();i++){ User user = userList.get(i); if(Objects.equals(userCard, user.getAadhaar())){ user.setCert(entry.getValue()); break; } } // System.out.print(entry.getValue());  } System.out.format(\u0026#34;Import Success, Positive:%d Negative:%d\\n\u0026#34;,positive,negative); } else { System.out.println(\u0026#34;no such file\u0026#34;); } return cert; } } ","permalink":"https://mathieulin.github.io/myblog/posts/cts4/","summary":"这是CTS代码 快速通过CTS 获取评测数据（读书人的事情嘛）\nString input=\u0026#34;\u0026#34;; while (true) { argStr = in.nextLine(); [+] input+=argStr; [+]\tinput+=\u0026#34;;\u0026#34;; String[] splited = argStr.split(\u0026#34;\\\\s+\u0026#34;); ...... else if (Objects.equals(splited[0], \u0026#34;QUIT\u0026#34;)){ [+]\tSystem.out.println(input);\tSystem.out.println(\u0026#34;----- Good Bye! -----\u0026#34;); System.exit(0); } 然后你就得到了\nTunakTunakTun;addLine Line13 4 Dazhongshi 28 Zhichunlu 30 Wudaokou 48 Shangdi 96 Xierqi 121 Longze 148;addLine Manchu 2 Shahe 20 Hamazhen 59 Wulongbei 150 Tangshancheng 207 Gaolimen 281 Fenghuangcheng 272 Sitaizi 430 Jiguanshan 498 Benxihu 586;addTrain K0012 Line13 22 90 7 120;addTrain G1001 Manchu 22 90 7 120 2.","title":"CTS4"},{"content":"我的第三篇博客 什么都没有？？？？\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.vLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.vvvLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.vvvLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n","permalink":"https://mathieulin.github.io/myblog/posts/my-third-post/","summary":"我的第三篇博客 什么都没有？？？？\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"My Third Post"},{"content":"1. 登录服务器 ssh ubuntu@121.5.31.11\n2. vscode远程连接服务器 按照视频教程无脑硬莽\n3. 在服务器中\ncd /etc/nginx/conf.d sudo touch daidai.conf sudo vim daidai.conf server { listen 84;//84改为你的端口号 # listen 443 ssl; # server_name zewan.top www.zewan.top; server_name 121.5.31.11; # server_name www.noietch.cn; location / { root /home/ubuntu/hotel/hotel_vue/frontend-demo-daidai; index index.html index.htm; try_files $uri $uri/ /index.html; } location /api { include /etc/nginx/uwsgi_params; uwsgi_pass 127.0.0.1:8080; } } 4.构建项目 更改一下本地的hotel项目（显示一下自己的姓名学号，我在输入框里placeholder显示）\n  npm run build\n  将dist文件重命名为frontend-demo-daidai\n  终端执行scp -r .\\frontend-demo-daidai\\ ubuntu@121.5.31.11:/home/ubuntu/hotel/hotel_vue/\n  应该就好了？\n","permalink":"https://mathieulin.github.io/myblog/posts/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/","summary":"1. 登录服务器 ssh ubuntu@121.5.31.11\n2. vscode远程连接服务器 按照视频教程无脑硬莽\n3. 在服务器中\ncd /etc/nginx/conf.d sudo touch daidai.conf sudo vim daidai.conf server { listen 84;//84改为你的端口号 # listen 443 ssl; # server_name zewan.top www.zewan.top; server_name 121.5.31.11; # server_name www.noietch.cn; location / { root /home/ubuntu/hotel/hotel_vue/frontend-demo-daidai; index index.html index.htm; try_files $uri $uri/ /index.html; } location /api { include /etc/nginx/uwsgi_params; uwsgi_pass 127.0.0.1:8080; } } 4.构建项目 更改一下本地的hotel项目（显示一下自己的姓名学号，我在输入框里placeholder显示）\n  npm run build\n  将dist文件重命名为frontend-demo-daidai\n  终端执行scp -r .","title":"前端项目傻逼式部署"},{"content":"这是大标题 这是二级标题 $$a\\lt b$$\n 这是小分点 这也是小分店  这是小小分店    import java.utils.iostream ","permalink":"https://mathieulin.github.io/myblog/posts/special/","summary":"这是大标题 这是二级标题 $$a\\lt b$$\n 这是小分点 这也是小分店  这是小小分店    import java.utils.iostream ","title":"我的一篇奇怪的博客"},{"content":"我的第一篇博客 什么都没有？？？？\n我是真的无语，这yyl真的我tm吐了啊！！！\n","permalink":"https://mathieulin.github.io/myblog/posts/my-first-post/","summary":"我的第一篇博客 什么都没有？？？？\n我是真的无语，这yyl真的我tm吐了啊！！！","title":"My First Post"}]